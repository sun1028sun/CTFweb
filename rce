# RCE（remote code execute）

##                 即远程命令执行或者代码执行（代码注入漏洞）rce漏洞

##         因为渗透的最终情况可以实现执行命令或者是代码都属于RCE，例如代码执行、文件包含、反序列化、命令执行，甚至是写文件Getshell都可以属于RCE



# 原理

##                 指网站应用程序有些需要调用执行系统命令，当用户能控制这些函数中的参数时，就可以将恶意命令拼接到正常的命令当中去，从而造成命令执行攻击



# 原因

## 1.代码层过滤不严

## 2.系统漏洞造成的命令注入

## 3.存在代码执行漏洞



# Windows常用的命令

```
1、dir----查看文件目录 

2、ipconfig----查看Windows的IP地址

3、arp -a----查看ARP缓存表

4、calc----在命令行打开计算器

5、regedit----打开注册表 

6、netstat -ano----查看开放的端口信息 

```





#  Linux常用的命令 

```
**1、cat /etc/passwd----查看** 

**2、passwd文件 id----查看该用户的ID号**

 **3、groups----查看用户所属的组** 

**4、cat /etc/group----查看组信息** 

**5、whoami----查看当前用户**

 **6、pwd----查看当前路径** 

**7、uname -a----查看主机信息**

 **8、cat /etc/issue----查看主机的配置信息**

 **9、netstat -pantu----查看开放的端口信息** 

## **10、netstat -nr----查看路由信息** 
cd: 切换目录
​					cd ..  # 返回上一级目录
​					cd ~  # 返回用户主目录
​				cp: 复制文件或目录。
​					cp source_file destination_file  # 复制文件
​					cp -r source_directory destination_directory  # 复制目录				                 mv: 移动或重命名文件和目录。
​					mv old_name new_name  # 重命名文件或目录
​					mv file_name /path/to/directory  # 移动文件
​				rm: 删除文件或目录
​					rm file_name  # 删除文件
​					rm -r directory_name  # 删除目录								                      mkdir: 创建新目录。					
​					mkdir new_directory
​				rmdir: 删除空目录。
​					rmdir directory_name
```

```
ls命令（查看目录文件名称）
1. ls -a 列出文件下所有的文件，包括以“.“开头的隐藏文件（linux下文件隐藏文件是以.开头的，如果存在..代表存在着父目录）。
2. ls -l 列出文件的详细信息，如创建者，创建时间，文件的读写权限列表等等。
3. ls -F 在每一个文件的末尾加上一个字符说明该文件的类型。"@"表示符号链接、"|"表示FIFOS、"/"表示目录、"="表示套接字。
4. ls -s 在每个文件的后面打印出文件的大小。 size(大小)
5. ls -t 按时间进行文件的排序 Time(时间)
6. ls -A 列出除了"."和".."以外的文件。
7. ls -R 将目录下所有的子目录的文件都列出来，相当于我们编程中的“递归”实现
8. ls -L 列出文件的链接名。Link（链接）
9. ls -S 以文件的大小进行排序
10.ls 查看目录文件名称
```

注:还有很多，不一一列举了

# Windows 常见管道符：



## 1.  `|`：管道符，直接执行后面的语句。

## 2.`||`：逻辑或，如果前一个命令执行失败，则执行后面的命令。

## 3.`&`：并行执行，允许同时执行两个命令，并且不管第一个命令是否成功。

## 4.&&`：逻辑与，如果前一个命令执行成功，则执行后面的命令。



# Linux 常见管道符：

- [ ] ## `;`：命令分隔符，用于分隔多个命令，按照顺序执行。

- [ ] ##  |：管道符，显示后面语句的执行结果。

- [ ] ## ||：逻辑或，如果前一个命令执行失败，则执行后面的命令。

- [ ] ## `&`：在后台执行，允许同时执行两个命令，不阻塞当前 shell，可以继续输入其他命令。

- [ ] ## `&&`：逻辑与，如果前一个命令执行成功，则执行后面的命令。

  # 常见命令执行函数

  | 函数名函数名 | 描述描述                                     | 输出方式输出方式 | 是否返回输出是否返回输出         | 输入输出交互输入输出交互 | 适用场景适用场景       |
  | ------------ | -------------------------------------------- | ---------------- | -------------------------------- | ------------------------ | ---------------------- |
  | system()     | 执行命令并输出结果                           | 直接输出         | 返回最后一行输出返回最后一行输出 | 否                       | 执行命令并立即查看结果 |
  | passthru()   | 执行命令并传递原始输出执行命令并传递原始输出 | 直接输出         | 原始输出                         | 否                       | 处理二进制数据或大输出 |
  | exec()       | 执行命令并捕获输出                           | 不输出           | 返回最后一行输出返回最后一行输出 | 否                       | 捕获输出到数组进行处理 |
  | shell_exec() | 执行命令并返回输出                           | 不输出           | 返回整个输出返回整个输出         | 否                       | 获取完整输出作为字符串 |
  | popen()      | 打开进程管道进行读/写打开进程管道进行读/写   | 通过管道         | 否                               | 是                       | 需要与子进程交互       |
  | proc_open()  | 打开进程并提供管道                           | 通过管道         | 否                               | 是                       | 复杂的进程控制和交互   |
  | pcntl_exec() | 替换当前进程并执行命令替换当前进程并执行命令 | 不输出           | 否                               | 否                       | 完全替换当前进程       |
  | 反引号       | 执行命令并返回输出                           | 不输出           | 返回整个输出返回整个输出         | 否                       | 获取完整输出作为字符串 |
  | $()          | 执行命令并返回输出                           | 不输出           | 返回整个输出返回整个输出         | 否                       | 获取完整输出作为字符串 |
  | printf()     | 格式化并输出字符串                           | 直接输出         | 否                               | 否                       | 格式化输出             |
  | var_dump()   | 输出变量的详细信息                           | 直接输出         | 否                               | 否                       | 调试输出变量信息       |

  注：

  passthru() ：执行命令并直接传递原始输出，适用于处理二进制数据 

  exec()：执行命令并将输出捕获到数组中，适用于需要处理或操作输出的情况 

  shell_exec()：执行命令并将整个输出作为字符串返回，适用于需要获取完整输出并进一步处理的情况 

  popen()：打开一个进程管道，可以读写命令的输出或输入，适用于需要与进程交互的情况 

  proc_open()：不仅可以执行命令，还能创建一个进程并提供对该进程的标准输入、标准输出和标准错误流的访问

   pcntl_exec()：一个底层函数，用于在当前进程空间中执行一个程序。这意味着调用 

  pcntl_exec() 后，当前 PHP 脚本会被替换为新执行的程序，不会返回到 PHP 脚本继续执行 

  var_dump(``)：使用反引号/$()进行命令执行，使用该函数进行回显 ``

  ``printf(``)：使用反引号/$()进行命令执行，使用该函数进行回显

  

  

  #  常见代码执行函数

  ###   PHP

  ###  •  eval()：将字符串作为php代码执行； 

  ###  •  assert()：将字符串作为php代码执行；

  ###  •  preg_replace+/e（php版本<5.5）：正则匹配替换字符串；/e为可执行模式

  

  ```
  <?php @preg_replace("/abc/e","$_REQUEST[x]","abcd"); ?>
  漏洞利用：?x=phpinfo();
  
  这段代码的作用是从字符串 "abcd" 中找到匹配 "abc" 的部分，并用用户通过请求参数 x 传递的内容来替换它。
  
  由于使用了 /e 修饰符，PHP不仅仅是简单地替换字符串，还会执行传入的字符串作为PHP代码。
  ```

  

  ### · create_function()（PHP 4 >= 4.0.1，PHP 5，PHP 7）：主要创建匿名函数；

  ```
  <?php 
  $a = create_function('$id',$_REQUEST[x]);
  echo $a('afssda');
   ?>
  漏洞利用：?x=phpinfo();
  
  ```

  ### · call_user_func_array()：回调函数，第一个参数为函数名，第二个参数为函数参数的数组；

  ```
  <?php call_user_func_array($_GET['a1'],$_GET['a2']); ?>
  ?a1=system&a2[]=whoami //命令执行
  ?a1=assert&a2[]=phpinfo() //代码执行
  
  ```

  ### · array_map()：将一个回调函数应用于数组的每个元素，第一个参数为回调函数，第二个参数为数组

###     · uasort() : 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联;

###     ·call_user_func()：回调函数，第一个参数为函数名，第二个参数为函数的参数；

###       · 可变函数：若变量后有括号，该变量会被当做函数名为变量值(前提是该变量值是存在           的函数名)的函数执行；



# 绕过

#  1.cat被过滤

### ·tac         与cat相反，按行反向输出

·more     按页显示，用于文件内容较多且不能滚动屏幕时查看文件
·less	与more类似
·tail	 查看文件末几行
·head      查看文件首几行
·nl            在cat查看文件的基础上显示行号
·od           以二进制方式读文件，od -A d -c /flag转人可读字符
·xxd         以二进制方式读文件，同时有可读字符显示
·sort	排序文件(可查看)
·uniq       报告或删除文件的重复行
·file -f      报错文件内容
·grep       过滤查找字符串，grep flag /flag
·vim        编辑器可查看

#  2.空格被过滤

| 以下可代替空格 |             |        |
| -------------- | ----------- | ------ |
| <              | <>          | %20    |
| %09            | $IFS$9      | ${IFS} |
| $IFS           | {cat,/flag} |        |

#  3.分号绕过

### 分号可以用  ?>  代替

### 也可使用%0a换行绕过

# 4.命令拼接绕过法

### $a=who  $b=ami    

### $a$b  即为  whoami

#   4.通配符使用

###    通配符作用（匹配文件名称）自动匹配

* ### 匹配任何字符串／文本，包括空字符串；

  ### *        代表任意字符（0个或多个） ls file *

  ### ?	匹配任何一个字符（不在括号内时）?代表人意1个字符 ls file 0

  ### [abcd]	匹配abcd中任何一个字符

  ### [a-z]	表示范围a到z，表示范围的意思

  ### {…}	表示生成序列。以逗号分隔，且不能有空格补充

  ### [!abcd]	或[^abcd]表示非，表示不匹配括号里面的任何一个字符

  # 5.字符拼接绕过

  //单引号          //反斜线

  //双引号          //反单引号

  ```
  如: c''at   c\a\t  c""a""t   c``a``t
  ```

  

### 当字符串被绕过时，可使用通配符进行绕过，同时也可以使用重造变量过滤法

### ~重造变量过滤法

```
?c=eval($_GET[1])；&1=echo`tac flag.php`;          //仅举例，具体情况具体分析，可使用其他函数执行命令
```



#          6.编码绕过

### base编码

### hex编码

### oct编码

### （将你想要执行的命令进行编码）

#      7.>/dev/null 2>&1绕过

### 此作用为：执行某个命令但又不希望在屏幕上显示输出结果，可以将输出重定向到 /dev/null，无论是标准输出还是错误输出（不回显）

## 1.   /dev :

##  在操作系统、驱动程序开发或硬件编程等领域，“dev” 也可以指代 “device”。例如，在 Linux 系统中，“/dev” 目录是一个特殊的目录，用于存放设备文件。

#### （2）输出重定向

##### 输出重定向的写法是 fd>file 或 fd>>file，> 代表覆盖，>> 代表追加。

